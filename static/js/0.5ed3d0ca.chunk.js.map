{"version":3,"sources":["tonva/entry/tools.tsx","tonva/img/logo.svg","tonva/entry/register.tsx"],"names":["tonvaTop","nav","loginTop","className","src","logo","alt","senders","type","caption","regex","mobileRegex","emailRegex","getSender","un","find","v","test","module","exports","RegisterController","account","password","verify","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","a","userApi","user","pwd","guest","undefined","retUser","alert","userLogined","this","openVPage","VAccount","VerifyPage","PasswordPage","accounts","RegSuccess","registerReturn","msg","isExists","ret","error","accountError","sendVerify","oem","toVerify","params","nick","country","mobile","mobileCountry","email","Number","register","clear","toSuccess","regReturn","Controller","ForgetController","resetPassword","schema","name","required","maxLength","uiSchema","res","resLang","registerRes","onSubmit","context","clearContextErrors","value","getValue","sender","setError","length","controller","checkAccount","onEnter","items","widget","label","placeholder","href","style","marginLeft","marginRight","onButtonClick","requiredFlag","privacyEntry","VPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","page","typeText","extra","header","openPage","values","form","data","rePwd","setValue","execute","push","users","onClick","map"],"mappings":"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","file":"static/js/0.5ed3d0ca.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { nav, mobileRegex, emailRegex } from '../components';\r\nimport logo from '../img/logo.svg';\r\n\r\nexport function tonvaTop() {\r\n    return nav.loginTop(<div className=\"d-flex align-items-center position-relative\">\r\n        <img className=\"App-logo h-3c position-absolute\" src={logo} alt=\"img\" />\r\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n            <span className=\"text-danger\">花</span>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, NumSchema, Ax} from '../components';\r\nimport { Controller, VPage } from '../vm';\r\nimport { userApi, RegisterParameter } from '../net';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from '../res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '注册账号';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(VAccount);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess(accounts?:any[]) {\r\n        this.openVPage(RegSuccess, accounts);\r\n    }\r\n\r\n    login = async (account?:string) => {\r\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n        await nav.userLogined(retUser);\r\n    }\r\n\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: \r\n                return '服务器发生错误';\r\n            case 4:\r\n                return '验证码错误';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute():Promise<any> {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess(ret);\r\n        return undefined;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass VAccount extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n\t\r\n\tinit() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n\t}\r\n\r\n\theader() {return this.controller.accountPageCaption;}\r\n\tfooter() {\r\n\t\treturn <Ax href=\"/login\">登录</Ax>;\r\n\t}\r\n\r\n    content():JSX.Element {\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t{tonvaTop()}\r\n\t\t\t<div className=\"h-3c\" />\r\n\t\t\t<Ax href=\"/login\">登录</Ax>\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit}\r\n\t\t\t\tonEnter={this.onEnter} \r\n\t\t\t\trequiredFlag={false} />\r\n\t\t\t{nav.privacyEntry()}\r\n\t\t</div>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n            this.controller.password = pwd;\r\n            error = await this.controller.execute();\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open(users: any[]) {\r\n        this.openPage(this.page, {users:users});\r\n    }\r\n\r\n    private page = ({users}:{users:any[]}) => {\r\n        const {account, successText, login} = this.controller;\r\n        if (users === undefined) {\r\n            return <Page header={false}>\r\n                <div className=\"container w-max-30c\">\r\n                    <div className=\"my-5\">\r\n                        <div className=\"py-5\">\r\n                            账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                        </div>\r\n                        <button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\r\n                            直接登录\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </Page>;\r\n        }\r\n        else {\r\n            return <Page header={false}>\r\n                <div className=\"container w-max-30c\">\r\n                    <div className=\"my-5\">\r\n                        <div className=\"py-5 text-success\">{successText}</div>\r\n                        {users.map((v:any) => {\r\n                            let {name} = v;\r\n                            return <div className=\"py-2 cursor-pointer\" onClick={()=>login(name)}>\r\n                                登录账号 <strong className=\"text-primary\">{name} </strong>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Page>;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}