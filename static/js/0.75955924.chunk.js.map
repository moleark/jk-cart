{"version":3,"sources":["tonva/entry/tools.tsx","tonva/img/logo.svg","tonva/entry/register.tsx"],"names":["logo","require","tonvaTop","nav","loginTop","className","src","alt","senders","type","caption","regex","mobileRegex","emailRegex","getSender","un","find","v","test","module","exports","RegisterController","account","password","verify","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","a","userApi","user","pwd","guest","undefined","retUser","alert","userLogined","this","openVPage","AccountPage","VerifyPage","PasswordPage","accounts","RegSuccess","registerReturn","msg","isExists","ret","error","accountError","sendVerify","oem","toVerify","params","nick","country","mobile","mobileCountry","email","Number","register","clear","toSuccess","regReturn","Controller","ForgetController","resetPassword","schema","name","required","maxLength","uiSchema","res","resLang","registerRes","page","header","controller","style","marginLeft","marginRight","onButtonClick","onSubmit","onEnter","requiredFlag","privacyEntry","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","VPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","setValue","execute","push","users","onClick","map"],"mappings":"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","file":"static/js/0.75955924.chunk.js","sourcesContent":["import * as React from 'react';\nimport { nav, mobileRegex, emailRegex } from '../components';\n\nconst logo = require('../img/logo.svg');\n\nexport function tonvaTop() {\n    return nav.loginTop(<div className=\"d-flex align-items-center position-relative\">\n        <img className=\"App-logo h-3c position-absolute\" src={logo} alt=\"img\" />\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\n            <span className=\"text-danger\">花</span>\n        </div>\n    </div>);\n}\n\ninterface Sender {\n    type: string;\n    caption: string;\n    regex: RegExp;\n}\n\nconst senders:Sender[] = [\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\n    {type:'email', caption:'邮箱', regex: emailRegex}\n];\n\nexport function getSender(un: string):Sender {\n    let sender = senders.find(v => v.regex.test(un) === true);\n    return sender;\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, NumSchema} from '../components';\nimport { Controller, VPage } from '../vm';\nimport { userApi, RegisterParameter } from '../net';\nimport '../css/va-form.css';\nimport { RegisterRes, registerRes } from '../res';\nimport { tonvaTop, getSender } from './tools';\n\nexport interface Values {\n    user: string;\n    pwd: string;\n    rePwd: string;\n    country?: string;\n    mobile?: string;\n    email?: string;\n}\n/*\nclass AccountInput extends TextWidget {\n    @observable private buttonDisabled: boolean = true;\n    private onClick = () => {\n        let {onButtonClick} = this.context.form.props;\n        if (onButtonClick === undefined) return;\n        onButtonClick(this.name, this.context);\n    }\n    protected onChange(evt: React.ChangeEvent<any>) {\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\n    }\n    render() {\n        return <>\n            <div className=\"input-group\">\n                <input ref={input=>this.input = input}\n                            className=\"form-control\"\n                            type={this.inputType}\n                            defaultValue={this.value}\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\n                            placeholder='手机号/邮箱'\n                            readOnly={this.readOnly}\n                            disabled={this.disabled}\n                            onKeyDown = {this.onKeyDown}\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-sm btn-outline-primary\"\n                        type=\"button\" disabled={this.buttonDisabled}\n                        onClick={this.onClick}>\n                        <small>发送验证码</small>\n                    </button>\n                </div>\n            </div>\n            {this.renderErrors()}\n        </>;\n    }\n}\n*/\nexport class RegisterController extends Controller {\n    account: string;\n    type:'mobile'|'email';\n    password: string;\n    verify: string;\n\n    accountPageCaption = '注册账号';\n    accountLabel = '注册账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '账号密码';\n    passwordSubmitCaption = '注册新账号'; \n    successText = '注册成功';\n\n    protected async internalStart() {\n        this.openVPage(AccountPage);\n    }\n\n    toVerify(account:string) {\n        this.account = account;\n        this.openVPage(VerifyPage);\n    }\n\n    toPassword() {\n        this.openVPage(PasswordPage);\n    }\n\n    toSuccess(accounts?:any[]) {\n        this.openVPage(RegSuccess, accounts);\n    }\n\n    login = async (account?:string) => {\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\n        if (retUser === undefined) {\n            alert('something wrong!');\n            return;\n        }\n        await nav.userLogined(retUser);\n    }\n\n    private regReturn(registerReturn:number):string {\n        let msg:any;\n        switch (registerReturn) {\n            default: \n                return '服务器发生错误';\n            case 4:\n                return '验证码错误';\n            case 0:\n                return;\n            case 1:\n                msg = '用户名 ' + this.account;\n                break;\n            case 2:\n                msg = '手机号 +' + this.account;\n                break;\n            case 3:\n                msg = '邮箱 ' + this.account;\n                break;\n        }\n        return msg + ' 已经被注册过了';\n    }\n\n    async checkAccount():Promise<string> {\n        let ret = await userApi.isExists(this.account);\n        let error = this.accountError(ret);\n        if (error !== undefined) return error;\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\n        this.toVerify(this.account);\n        return;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists > 0) return '已经被注册使用了';\n    }\n\n    async execute() {\n        let params: RegisterParameter = {\n            nick: undefined,\n            user: this.account, \n            pwd: this.password,\n            country: undefined,\n            mobile: undefined,\n            mobileCountry: undefined,\n            email: undefined,\n            verify: this.verify\n        }\n        switch (this.type) {\n            case 'mobile':\n                params.mobile = Number(this.account);\n                params.mobileCountry=86;\n                break;\n            case 'email':\n                params.email = this.account;\n                break;\n        }\n        let ret = await userApi.register(params);\n        if (ret === 0) {\n            nav.clear();\n            this.toSuccess();\n            return;\n        }\n        let error = this.regReturn(ret)\n        return error;\n    }\n}\n\nexport class ForgetController extends RegisterController {\n    accountPageCaption = '密码找回';\n    accountLabel = '账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '重置密码';\n    passwordSubmitCaption = '提交'; \n    successText = '成功修改密码';\n\n    async execute():Promise<any> {\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\n        nav.clear();\n        this.toSuccess(ret);\n        return undefined;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists === 0) return '请输入正确的账号';\n    }\n}\n\nclass AccountPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'verify', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n\n    protected res: RegisterRes = resLang(registerRes);\n    async open() {\n        this.uiSchema = {\n            items: {\n                user: {\n                    widget: 'text',\n                    label: this.controller.accountLabel,\n                    placeholder: '手机号或邮箱',\n                } as UiTextItem, \n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\n            }\n        }\n                \n            this.openPage(this.page);\n    }\n\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.accountPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                {tonvaTop()}\n                <div className=\"h-3c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter} \n                    requiredFlag={false} />\n                {nav.privacyEntry()}\n            </div>\n        </Page>;\n    }\n\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        context.clearContextErrors();\n        let user = 'user';\n        let value = context.getValue(user);\n        let sender = getSender(value);\n        if (sender === undefined) {\n            context.setError(user, '必须是手机号或邮箱');\n            return;\n        }\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\n        if (type === 'mobile') {\n            if (value.length !== 11 || value[0] !== '1') {\n                context.setError(user, '请输入正确的手机号');\n                return;\n            }\n        }\n        this.controller.account = value;\n        this.controller.type = type;\n        let ret = await this.controller.checkAccount();\n        if (ret !== undefined) context.setError(user, ret);\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'user') {\n            return await this.onSubmit('verify', context);\n        }\n    }\n}\n\nclass VerifyPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\n        context.setDisabled('submit', !value || (value.length !== 6));\n    }\n    private uiSchema: UiSchema = {\n        items: {\n            verify: {\n                widget: 'text',\n                label: '验证码',\n                placeholder: '请输入验证码',\n                onChanged: this.onVerifyChanged,\n            } as UiTextItem, \n            submit: {\n                widget: 'button', \n                className: 'btn btn-primary btn-block mt-3', \n                label: '下一步 >',\n                disabled: true\n            } as UiButton,\n        }\n    }\n    async open() {\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let verify = this.controller.verify = context.getValue('verify');\n        let ret = await userApi.checkVerify(this.controller.account, verify);\n        if (ret === 0) {\n            context.setError('verify', '验证码错误');\n            return;\n        }\n        this.controller.toPassword();\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'verify') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        let typeText:string, extra:any;\n        switch (this.controller.type) {\n            case 'mobile': typeText = '手机号'; break;\n            case 'email': \n                typeText = '邮箱'; \n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\n                break;\n        }\n        return <Page header=\"验证码\">\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                验证码已经发送到{typeText}<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                {extra}\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit} \n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass PasswordPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n    async open() {\n        this.uiSchema = {\n            items: {\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\n            }\n        }\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let {pwd, rePwd} = values;\n        let error:string;\n        if (!pwd || pwd !== rePwd) {\n            context.setValue('pwd', '');\n            context.setValue('rePwd', '');\n            error = '密码错误，请重新输入密码！';\n            context.setError('pwd', error);\n        }\n        else {\n            this.controller.password = pwd;\n            error = await this.controller.execute();\n            if (error !== undefined) {\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\n            }\n        }\n        return error;\n    }\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'rePwd') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.passwordPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                注册账号<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass RegSuccess extends VPage<RegisterController> {\n    async open(users: any[]) {\n        this.openPage(this.page, {users:users});\n    }\n\n    private page = ({users}:{users:any[]}) => {\n        const {account, successText, login} = this.controller;\n        if (users === undefined) {\n            return <Page header={false}>\n                <div className=\"container w-max-30c\">\n                    <div className=\"my-5\">\n                        <div className=\"py-5\">\n                            账号 <strong className=\"text-primary\">{account} </strong> {successText}！\n                        </div>\n                        <button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\n                            直接登录\n                        </button>\n                    </div>\n                </div>\n            </Page>;\n        }\n        else {\n            return <Page header={false}>\n                <div className=\"container w-max-30c\">\n                    <div className=\"my-5\">\n                        <div className=\"py-5 text-success\">{successText}</div>\n                        {users.map((v:any) => {\n                            let {name} = v;\n                            return <div className=\"py-2 cursor-pointer\" onClick={()=>login(name)}>\n                                登录账号 <strong className=\"text-primary\">{name} </strong>\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </Page>;\n        }\n    }\n}\n"],"sourceRoot":""}